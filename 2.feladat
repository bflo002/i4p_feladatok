static string[] lehetosegfuggveny(string xx, string zz, int kezdet)
        {
            string[] szavak = File.ReadAllLines("words.txt");
            char[] abc = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', ' ' };

            List<string> lista = new List<string>();

            for (int i = 0; i < szavak.Length; i++)
            {

                char[] k = new char[szavak[i].Length];
                for (int j = kezdet; j < szavak[i].Length + kezdet; j++)
                {
                    if (xx.Length  >= (kezdet + szavak[i].Length))
                    {
                        if (Array.IndexOf(abc, szavak[i][j - kezdet]) == Array.IndexOf(abc, xx[j]))
                        {
                            k[j - kezdet] = abc[0];
                        }
                        if (Array.IndexOf(abc, szavak[i][j - kezdet]) < Array.IndexOf(abc, xx[j]))
                        {
                            k[j - kezdet] = abc[Array.IndexOf(abc, xx[j]) - Array.IndexOf(abc, szavak[i][j - kezdet])];
                        }
                        if (Array.IndexOf(abc, szavak[i][j - kezdet]) > Array.IndexOf(abc, xx[j]))
                        {
                            k[j - kezdet] = abc[(27 + Array.IndexOf(abc, xx[j])) - Array.IndexOf(abc, szavak[i][j - kezdet])];
                        }
                    }
                    
                }
                string ks = new string(k);

                //Megneztuk, hogy az i-edik szohoz milyen kulcsot kellett volna rendelni

                for (int l = 0; l < szavak.Length; l++)
                {
                    if (megfejto(zz.Substring(kezdet,ks.Length),ks).Contains(' ') && !lista.Contains(ks))
                    {
                        if (megfejto(zz.Substring(kezdet, ks.Length), ks).Split(' ')[0].Length > megfejto(zz.Substring(kezdet, ks.Length), ks).Split(' ')[1].Length && szavak[l].Contains(megfejto(zz.Substring(kezdet, ks.Length), ks).Split(' ')[0]))     //ha az elso fele hosszabb
                        {
                            lista.Add(ks);
                            Console.WriteLine(megfejto(zz.Substring(kezdet, ks.Length), ks).Split(' ')[0]);
                        }
                        if (megfejto(zz.Substring(kezdet, ks.Length), ks).Split(' ')[0].Length < megfejto(zz.Substring(kezdet, ks.Length), ks).Split(' ')[1].Length && szavak[l].Contains(megfejto(zz.Substring(kezdet, ks.Length), ks).Split(' ')[1]))     //ha az elso fele hosszabb
                        {
                            lista.Add(ks);
                            Console.WriteLine(megfejto(zz.Substring(kezdet, ks.Length), ks).Split(' ')[1]);
                        }
                        if (ks.Length == 1)
                        {
                            lista.Add(ks);
                        }

                    }
                    else
                    {
                        if (szavak[l].Contains(megfejto(zz.Substring(kezdet, ks.Length),ks)) && !lista.Contains(ks))
                        {
                            lista.Add(ks);
                            Console.WriteLine(megfejto(zz.Substring(kezdet, ks.Length), ks));
                        }
                    }
                }
            }


            string[] sorted = lista.ToArray();
            Array.Sort(sorted, (y, x) => x.Length.CompareTo(y.Length));            return sorted;
        }
